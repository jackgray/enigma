# vtk makes this a mess

#
# Development container base on Debian Wheezy
#
# The container contains:python3.4.5, CMake, VTK, Tcl, Tk, OpenGL
#
FROM ubuntu:focal
#  as builder

RUN apt-get -y update && \
    apt-get -y install git \
               build-essential \
               cmake \
               libgl1-mesa-dev \
               libegl1-mesa-dev \
               mesa-common-dev \
               mesa-utils \
               freeglut3-dev \
               ninja-build \
               python3 \
               python3-dev \
               gcc \
               make \
               unzip \
               curl \
               git \
               wget \
               cmake \
               qtcreator \
               qt5-default 

###################################################################################################################
# Download sources & setup supporting libraries that are needed to build VTK
###################################################################################################################

WORKDIR /tmp

# # Install VTK
# RUN git clone https://gitlab.kitware.com/vtk/vtk.git 

# # Download, extract & build CMake
# # http://www.vtk.org/Wiki/VTK/Configure_and_Build
# RUN wget https://github.com/Kitware/CMake/releases/download/v3.21.2/cmake-3.21.2-linux-x86_64.tar.gz \
#     && tar xzf cmake-3.21.2-linux-x86_64.tar.gz
# RUN cd cmake-3.21.2-linux-x86_64 \
#     ./bootstrap \
#     # -- -DCMAKE_BUILD_TYPE:STRING=Release \
#     # && ./configure --prefix=/usr/local \
#     && make \
#     && make install

# Install OpenGL
# Debian, Ubuntu
# https://en.wikibooks.org/wiki/OpenGL_Programming/Installation/Linux
# RUN apt-get update && apt-get install --yes build-essential libgl1-mesa-dev

# Download & build Tcl
# https://www.tcl.tk/doc/howto/compile.html#unix
# RUN wget http://prdownloads.sourceforge.net/tcl/tcl8.6.6-src.tar.gz && tar -zxvf tcl8.6.6-src.tar.gz
# RUN cd tcl8.6.6/unix && ./configure && make && make install

# Download & build Tk
# https://www.tcl.tk/doc/howto/compile.html
# RUN wget http://prdownloads.sourceforge.net/tcl/tk8.6.6-src.tar.gz && tar -zxvf tk8.6.6-src.tar.gz
# RUN cd tk8.6.6/unix && ./configure && make && make install
##################################################################################################################
# /end setup
###################################################################################################################

###################################################################################################################
# Building VTK with python interfaces
# https://docs.pyvista.org/extras/building_vtk.html
###################################################################################################################

# WORKDIR /tmp/vtk
# RUN git checkout v9.0.1

# ENV PYTHONPATH=/opt/vtk/lib:/opt/vtk/lib/site-packages:/opt/vtk/Wrapping/Python:$PYTHONPATH 

# ENV PYBIN=/usr/bin/python3

# RUN mkdir -p /opt/vtk && \  
#     mkdir -p /op6/vtk/build && \
#     cd /opt/vtk/build && \
#     ccmake -GNINJA \
#         -VTK_WRAP_PYTHON=ON \
#         -
        

# # Use external
# RUN cmake -GNinja \
#     -DCMAKE_BUILD_TYPE=Release \
#     -DVTK_BUILD_TESTING=OFF \
#     -DVTK_BUILD_DOCUMENTATION=OFF \
#     -DVTK_BUILD_EXAMPLES=OFF \
#     -DVTK_DATA_EXCLUDE_FROM_ALL:BOOL=ON \
#     -DVTK_MODULE_ENABLE_VTK_PythonInterpreter:STRING=NO \
#     -DVTK_WHEEL_BUILD=ON \
#     -DVTK_PYTHON_VERSION=3 \
#     -DVTK_WRAP_PYTHON=ON \
#     -DVTK_OPENGL_HAS_EGL=TRUE \
#     -DPython3_EXECUTABLE=$PYBIN ../ && \
#     ninja

# # Set OpenGL EGL to TRUE for headless use (containers)
    

# # Now install the python bindings
# # RUN cd /opt/vtk-build2/Wrapping/Python && make && make install

# # Set environment variable to add the VTK libs to the Shared Libraries
# # http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html
# # export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/vtk-build2/lib
# ENV LD_LIBRARY_PATH=/opt/vtk/lib:$LD_LIBRARY_PATH
# ###################################################################################################################
# # /end VTK Build
# ###################################################################################################################

# # Create Mount points
# # https://docs.docker.com/engine/reference/builder/#/volume
# #
# # - /vtk-build: directory is used to build the VTK library from with a container with ccmake
# # - /out: directory is used for python to write output files (JPEG, PNG, etc)
# #VOLUME ["/vtk-build", "/out"]
# #VOLUME ["/out"]

# # Create the possible mount points
# RUN mkdir /out && mkdir /src

# # Set the source dir as default
# WORKDIR /src

###################################################################################################################
# Install ENIGMA
###################################################################################################################

# keep control over versioning to prevent unexpected breaks in package compatibility
ENV ENIGMA_VERSION='1.1.3'

RUN apt-get update && \ 
    apt-get -y upgrade && \
    apt-get -y install \
               wget \
               git \
               vtk

# Install enigma toolbox 
RUN cd /usr/local/src && \
    git clone https://github.com/MICA-MNI/ENIGMA.git && \
    cd /usr/local/src/ENIGMA && \
    git checkout -f tags/$ENIGMA_VERSION && \
    cd /usr/local/src/ENIGMA && \
    pip3 install . && \
    python3 setup.py install

ENV PATH=/opt/enigma/bin:/usr/local/src:$PATH 

# Link cache and added libraries
RUN ldconfig

ARG BUILD_DATE
ARG VCS_REF
ARG VERSION 


    